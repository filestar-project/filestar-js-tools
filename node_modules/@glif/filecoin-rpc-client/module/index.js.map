{"version":3,"sources":["../src/index.js"],"names":["axios","removeEmptyHeaders","headers","newHeaders","Object","keys","forEach","key","throwIfErrors","response","error","message","Error","LotusRpcEngine","constructor","config","apiAddress","token","request","method","params","data","post","jsonrpc","id","Accept","Authorization","result"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,kBAAkB,GAAGC,OAAO,IAAI;AAC3C,QAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6BC,GAAG,IAAI;AAClC,QAAIL,OAAO,CAACK,GAAD,CAAX,EAAkBJ,UAAU,CAACI,GAAD,CAAV,GAAkBL,OAAO,CAACK,GAAD,CAAzB;AACnB,GAFD;AAGA,SAAOJ,UAAP;AACD,CANM;AAQP,OAAO,MAAMK,aAAa,GAAGC,QAAQ,IAAI;AACvC,MAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,QAAID,QAAQ,CAACC,KAAT,CAAeC,OAAnB,EAA4B,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACC,KAAT,CAAeC,OAAzB,CAAN,CAA5B,KACK,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACN,GAHD,MAGO;AACL,WAAOH,QAAP;AACD;AACF,CAPM;;AASP,MAAMI,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,QAAI,CAACA,MAAL,EACE,MAAM,IAAIH,KAAJ,CACJ,8DADI,CAAN;AAGF,SAAKI,UAAL,GAAkBD,MAAM,CAACC,UAAP,IAAqB,8BAAvC;AACA,SAAKC,KAAL,GAAaF,MAAM,CAACE,KAApB;AACD;;AAEKC,EAAAA,OAAN,CAAcC,MAAd,EAAsB,GAAGC,MAAzB,EAAiC;AAAA;;AAAA;AAC/B,YAAM;AAAEC,QAAAA;AAAF,gBAAiBrB,KAAK,CAACsB,IAAN,CACrB,KAAI,CAACN,UADgB,EAErB;AACEO,QAAAA,OAAO,EAAE,KADX;AAEEJ,QAAAA,MAAM,EAAG,YAAWA,MAAO,EAF7B;AAGEC,QAAAA,MAAM,EAAE,CAAC,GAAGA,MAAJ,CAHV;AAIEI,QAAAA,EAAE,EAAE;AAJN,OAFqB,EAQrB;AACEtB,QAAAA,OAAO,EAAED,kBAAkB,CAAC;AAC1BwB,UAAAA,MAAM,EAAE,KADkB;AAE1BC,UAAAA,aAAa,EAAE,KAAI,CAACT,KAAL,GAAc,UAAS,KAAI,CAACA,KAAM,EAAlC,GAAsC;AAF3B,SAAD;AAD7B,OARqB,CAAvB;AAeAT,MAAAA,aAAa,CAACa,IAAD,CAAb;AACA,aAAOA,IAAI,CAACM,MAAZ;AAjB+B;AAkBhC;;AA5BkB;;AA+BrB,eAAed,cAAf","sourcesContent":["import axios from 'axios'\n\nexport const removeEmptyHeaders = headers => {\n  const newHeaders = {}\n  Object.keys(headers).forEach(key => {\n    if (headers[key]) newHeaders[key] = headers[key]\n  })\n  return newHeaders\n}\n\nexport const throwIfErrors = response => {\n  if (response.error) {\n    if (response.error.message) throw new Error(response.error.message)\n    else throw new Error('Unknown jsonrpc error')\n  } else {\n    return response\n  }\n}\n\nclass LotusRpcEngine {\n  constructor(config) {\n    if (!config)\n      throw new Error(\n        'Must pass a config object to the LotusRpcEngine constructor.',\n      )\n    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0'\n    this.token = config.token\n  }\n\n  async request(method, ...params) {\n    const { data } = await axios.post(\n      this.apiAddress,\n      {\n        jsonrpc: '2.0',\n        method: `Filecoin.${method}`,\n        params: [...params],\n        id: 1,\n      },\n      {\n        headers: removeEmptyHeaders({\n          Accept: '*/*',\n          Authorization: this.token ? `Bearer ${this.token}` : null,\n        }),\n      },\n    )\n    throwIfErrors(data)\n    return data.result\n  }\n}\n\nexport default LotusRpcEngine\n"],"file":"index.js"}