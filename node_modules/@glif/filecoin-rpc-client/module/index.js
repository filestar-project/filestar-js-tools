function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import axios from 'axios';
export const removeEmptyHeaders = headers => {
  const newHeaders = {};
  Object.keys(headers).forEach(key => {
    if (headers[key]) newHeaders[key] = headers[key];
  });
  return newHeaders;
};
export const throwIfErrors = response => {
  if (response.error) {
    if (response.error.message) throw new Error(response.error.message);else throw new Error('Unknown jsonrpc error');
  } else {
    return response;
  }
};

class LotusRpcEngine {
  constructor(config) {
    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0';
    this.token = config.token;
  }

  request(method, ...params) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const {
        data
      } = yield axios.post(_this.apiAddress, {
        jsonrpc: '2.0',
        method: `Filecoin.${method}`,
        params: [...params],
        id: 1
      }, {
        headers: removeEmptyHeaders({
          Accept: '*/*',
          Authorization: _this.token ? `Bearer ${_this.token}` : null
        })
      });
      throwIfErrors(data);
      return data.result;
    })();
  }

}

export default LotusRpcEngine;
//# sourceMappingURL=index.js.map