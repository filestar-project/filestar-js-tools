{"version":3,"sources":["../src/index.js"],"names":["axios","removeEmptyHeaders","headers","newHeaders","Object","keys","forEach","key","throwIfErrors","response","error","message","Error","LotusRpcEngine","config","apiAddress","token","method","params","post","jsonrpc","id","Accept","Authorization","data","result"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,OAAO,EAAI;AAC3C,MAAMC,UAAU,GAAG,EAAnB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA6B,UAAAC,GAAG,EAAI;AAClC,QAAIL,OAAO,CAACK,GAAD,CAAX,EAAkBJ,UAAU,CAACI,GAAD,CAAV,GAAkBL,OAAO,CAACK,GAAD,CAAzB;AACnB,GAFD;AAGA,SAAOJ,UAAP;AACD,CANM;AAQP,OAAO,IAAMK,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,QAAQ,EAAI;AACvC,MAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,QAAID,QAAQ,CAACC,KAAT,CAAeC,OAAnB,EAA4B,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACC,KAAT,CAAeC,OAAzB,CAAN,CAA5B,KACK,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACN,GAHD,MAGO;AACL,WAAOH,QAAP;AACD;AACF,CAPM;;IASDI,c;AACJ,0BAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAI,CAACA,MAAL,EACE,MAAM,IAAIF,KAAJ,CACJ,8DADI,CAAN;AAGF,SAAKG,UAAL,GAAkBD,MAAM,CAACC,UAAP,IAAqB,8BAAvC;AACA,SAAKC,KAAL,GAAaF,MAAM,CAACE,KAApB;AACD;;;;;8FAEaC,M;;;;;;;;;;;;0CAAWC,M;AAAAA,kBAAAA,M;;;;uBACAlB,KAAK,CAACmB,IAAN,CACrB,KAAKJ,UADgB,EAErB;AACEK,kBAAAA,OAAO,EAAE,KADX;AAEEH,kBAAAA,MAAM,qBAAcA,MAAd,CAFR;AAGEC,kBAAAA,MAAM,YAAMA,MAAN,CAHR;AAIEG,kBAAAA,EAAE,EAAE;AAJN,iBAFqB,EAQrB;AACEnB,kBAAAA,OAAO,EAAED,kBAAkB,CAAC;AAC1BqB,oBAAAA,MAAM,EAAE,KADkB;AAE1BC,oBAAAA,aAAa,EAAE,KAAKP,KAAL,oBAAuB,KAAKA,KAA5B,IAAsC;AAF3B,mBAAD;AAD7B,iBARqB,C;;;;AAAfQ,gBAAAA,I,qBAAAA,I;AAeRhB,gBAAAA,aAAa,CAACgB,IAAD,CAAb;iDACOA,IAAI,CAACC,M;;;;;;;;;;;;;;;;;;;;;AAIhB,eAAeZ,cAAf","sourcesContent":["import axios from 'axios'\n\nexport const removeEmptyHeaders = headers => {\n  const newHeaders = {}\n  Object.keys(headers).forEach(key => {\n    if (headers[key]) newHeaders[key] = headers[key]\n  })\n  return newHeaders\n}\n\nexport const throwIfErrors = response => {\n  if (response.error) {\n    if (response.error.message) throw new Error(response.error.message)\n    else throw new Error('Unknown jsonrpc error')\n  } else {\n    return response\n  }\n}\n\nclass LotusRpcEngine {\n  constructor(config) {\n    if (!config)\n      throw new Error(\n        'Must pass a config object to the LotusRpcEngine constructor.',\n      )\n    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0'\n    this.token = config.token\n  }\n\n  async request(method, ...params) {\n    const { data } = await axios.post(\n      this.apiAddress,\n      {\n        jsonrpc: '2.0',\n        method: `Filecoin.${method}`,\n        params: [...params],\n        id: 1,\n      },\n      {\n        headers: removeEmptyHeaders({\n          Accept: '*/*',\n          Authorization: this.token ? `Bearer ${this.token}` : null,\n        }),\n      },\n    )\n    throwIfErrors(data)\n    return data.result\n  }\n}\n\nexport default LotusRpcEngine\n"],"file":"index.js"}