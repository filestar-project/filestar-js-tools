function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import axios from 'axios';
export var removeEmptyHeaders = function removeEmptyHeaders(headers) {
  var newHeaders = {};
  Object.keys(headers).forEach(function (key) {
    if (headers[key]) newHeaders[key] = headers[key];
  });
  return newHeaders;
};
export var throwIfErrors = function throwIfErrors(response) {
  if (response.error) {
    if (response.error.message) throw new Error(response.error.message);else throw new Error('Unknown jsonrpc error');
  } else {
    return response;
  }
};

var LotusRpcEngine = /*#__PURE__*/function () {
  function LotusRpcEngine(config) {
    _classCallCheck(this, LotusRpcEngine);

    if (!config) throw new Error('Must pass a config object to the LotusRpcEngine constructor.');
    this.apiAddress = config.apiAddress || 'http://127.0.0.1:1234/rpc/v0';
    this.token = config.token;
  }

  _createClass(LotusRpcEngine, [{
    key: "request",
    value: function () {
      var _request = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(method) {
        var _len,
            params,
            _key,
            _yield$axios$post,
            data,
            _args = arguments;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                for (_len = _args.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  params[_key - 1] = _args[_key];
                }

                _context.next = 3;
                return axios.post(this.apiAddress, {
                  jsonrpc: '2.0',
                  method: "Filecoin.".concat(method),
                  params: [].concat(params),
                  id: 1
                }, {
                  headers: removeEmptyHeaders({
                    Accept: '*/*',
                    Authorization: this.token ? "Bearer ".concat(this.token) : null
                  })
                });

              case 3:
                _yield$axios$post = _context.sent;
                data = _yield$axios$post.data;
                throwIfErrors(data);
                return _context.abrupt("return", data.result);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function request(_x) {
        return _request.apply(this, arguments);
      }

      return request;
    }()
  }]);

  return LotusRpcEngine;
}();

export default LotusRpcEngine;
//# sourceMappingURL=index.js.map