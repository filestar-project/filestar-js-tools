import { FilecoinNumber } from '@glif/filecoin-number';
import LotusRpcEngine, { Config } from '@glif/filecoin-rpc-client';
import { Message, LotusMessage } from '@glif/filecoin-message';
import { validatePath } from './utils';
export { validatePath };
declare type Network = 'f' | 't';
declare type SignFunc = (message: LotusMessage, path: string) => Promise<string>;
declare type GetAccountsFunc = (network: Network, startIdx: number, endIdx: number) => string[];
export interface WalletSubProvider {
    sign: SignFunc;
    getAccounts: GetAccountsFunc;
}
declare class Filecoin {
    wallet: WalletSubProvider;
    jsonRpcEngine: LotusRpcEngine;
    constructor(provider: WalletSubProvider, config?: Config);
    getBalance: (address: string) => Promise<FilecoinNumber>;
    sendMessage: (message: LotusMessage, signature: string) => Promise<{
        '/': string;
    }>;
    getNonce: (address: string) => Promise<number>;
    cloneMsgWOnChainFromAddr: (message: LotusMessage) => Promise<LotusMessage>;
    gasEstimateFeeCap: (message: LotusMessage) => Promise<FilecoinNumber>;
    gasEstimateGasLimit: (message: LotusMessage) => Promise<FilecoinNumber>;
    gasEstimateGasPremium: (message: LotusMessage, numBlocksIncluded?: number) => Promise<FilecoinNumber>;
    gasEstimateMessageGas: (message: LotusMessage, maxFee?: string) => Promise<Message>;
    gasEstimateMaxFee: (message: LotusMessage, useMsgGas?: boolean) => Promise<{
        maxFee: FilecoinNumber;
        message: LotusMessage;
    }>;
    /**
     *
     * Assuming you didn't overestimate gas by more than 10% then you will pay:
     * GasUsed*BaseFee+GasLimit*max(0, min(FeeCap-BaseFee, GasPremium))
     */
    gasCalcTxFee: (gasFeeCap: string, gasPremium: string, gasLimit: number, baseFee: string, gasUsed: string) => Promise<FilecoinNumber>;
}
export default Filecoin;
